const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');
const https = require('https');

console.log('üîß CONFIGURA√á√ÉO AUTOM√ÅTICA DO GITHUB');
console.log('============================================================');

// Fun√ß√£o para fazer requisi√ß√µes HTTPS
function makeGitHubRequest(options, data = null) {
    return new Promise((resolve, reject) => {
        const req = https.request(options, (res) => {
            let responseData = '';
            
            res.on('data', (chunk) => {
                responseData += chunk;
            });
            
            res.on('end', () => {
                try {
                    const parsed = responseData ? JSON.parse(responseData) : {};
                    resolve({ statusCode: res.statusCode, data: parsed, headers: res.headers });
                } catch (error) {
                    resolve({ statusCode: res.statusCode, data: responseData, headers: res.headers });
                }
            });
        });
        
        req.on('error', (error) => {
            reject(error);
        });
        
        if (data) {
            req.write(JSON.stringify(data));
        }
        
        req.end();
    });
}

// Fun√ß√£o para validar token
async function validateToken(token) {
    const options = {
        hostname: 'api.github.com',
        path: '/user',
        method: 'GET',
        headers: {
            'Authorization': `token ${token}`,
            'User-Agent': 'GitHub-Sync-App',
            'Accept': 'application/vnd.github.v3+json'
        }
    };
    
    return await makeGitHubRequest(options);
}

async function setupGitHubAutomatically() {
    try {
        console.log('\nüìã INSTRU√á√ïES PARA CONFIGURA√á√ÉO:');
        console.log('============================================================');
        console.log('\n1. üåê Acesse: https://github.com/settings/tokens');
        console.log('2. üîò Clique em "Generate new token" > "Generate new token (classic)"');
        console.log('3. üìù D√™ um nome: "GitHub Sync App"');
        console.log('4. ‚úÖ Selecione os scopes:');
        console.log('   - ‚úì repo (Full control of private repositories)');
        console.log('   - ‚úì user (Update ALL user data)');
        console.log('   - ‚úì admin:repo_hook (Full control of repository hooks)');
        console.log('5. üéØ Clique em "Generate token"');
        console.log('6. üìã Copie o token (come√ßa com "ghp_")');
        
        console.log('\nüíæ COMO CONFIGURAR O TOKEN:');
        console.log('============================================================');
        console.log('\nOp√ß√£o 1 - Via arquivo .env:');
        console.log('1. Crie um arquivo ".env" na raiz do projeto');
        console.log('2. Adicione: GITHUB_TOKEN=seu_token_aqui');
        console.log('3. Execute: node auto-github-setup.cjs');
        
        console.log('\nOp√ß√£o 2 - Via vari√°vel de ambiente:');
        console.log('1. No PowerShell: $env:GITHUB_TOKEN="seu_token_aqui"');
        console.log('2. Execute: node auto-github-setup.cjs');
        
        console.log('\nOp√ß√£o 3 - Editar arquivo de tokens diretamente:');
        console.log('1. Abra: data/auth/tokens.json');
        console.log('2. Substitua "MASKED_FOR_SECURITY" pelo seu token real');
        console.log('3. Execute: node auto-github-setup.cjs');
        
        // Tentar carregar token de diferentes fontes
        let token = null;
        let tokenSource = '';
        
        // 1. Tentar carregar do .env
        const envPath = path.join(__dirname, '.env');
        if (fs.existsSync(envPath)) {
            const envContent = fs.readFileSync(envPath, 'utf8');
            const match = envContent.match(/GITHUB_TOKEN=(.+)/);
            if (match && match[1] && match[1] !== 'seu_token_aqui') {
                token = match[1].trim();
                tokenSource = 'arquivo .env';
            }
        }
        
        // 2. Tentar carregar da vari√°vel de ambiente
        if (!token && process.env.GITHUB_TOKEN && process.env.GITHUB_TOKEN !== 'seu_token_aqui') {
            token = process.env.GITHUB_TOKEN;
            tokenSource = 'vari√°vel de ambiente';
        }
        
        // 3. Tentar carregar do arquivo de tokens
        if (!token) {
            const tokensPath = path.join(__dirname, 'data', 'auth', 'tokens.json');
            if (fs.existsSync(tokensPath)) {
                const tokens = JSON.parse(fs.readFileSync(tokensPath, 'utf8'));
                const userId = 'd2929b81-cb3f-47a1-b47b-6b0311964361';
                
                if (tokens[userId]?.github_token && 
                    tokens[userId].github_token !== 'MASKED_FOR_SECURITY' &&
                    tokens[userId].github_token.startsWith('ghp_')) {
                    token = tokens[userId].github_token;
                    tokenSource = 'arquivo de tokens';
                }
            }
        }
        
        if (!token) {
            console.log('\n‚ùå NENHUM TOKEN ENCONTRADO');
            console.log('============================================================');
            console.log('\nPor favor, configure um token usando uma das op√ß√µes acima.');
            console.log('\nüîç Locais verificados:');
            console.log('- ‚ùå Arquivo .env');
            console.log('- ‚ùå Vari√°vel de ambiente GITHUB_TOKEN');
            console.log('- ‚ùå Arquivo data/auth/tokens.json');
            
            // Criar arquivo .env de exemplo
            const envExample = `# Configura√ß√£o do GitHub Token\n# Substitua 'seu_token_aqui' pelo seu token real do GitHub\nGITHUB_TOKEN=seu_token_aqui\n`;
            fs.writeFileSync('.env.example', envExample);
            console.log('\nüìÑ Arquivo .env.example criado como refer√™ncia.');
            
            process.exit(1);
        }
        
        console.log(`\n‚úÖ TOKEN ENCONTRADO (${tokenSource})`);
        console.log('============================================================');
        
        // Validar token
        console.log('üîç Validando token...');
        const validation = await validateToken(token);
        
        if (validation.statusCode !== 200) {
            throw new Error(`Token inv√°lido: ${validation.statusCode} - ${JSON.stringify(validation.data)}`);
        }
        
        const user = validation.data;
        console.log(`‚úÖ Token v√°lido para usu√°rio: ${user.login}`);
        console.log(`üë§ Nome: ${user.name || 'N/A'}`);
        console.log(`üìä Reposit√≥rios p√∫blicos: ${user.public_repos}`);
        
        // Verificar permiss√µes
        const scopes = validation.headers['x-oauth-scopes'] || '';
        console.log(`üîê Scopes: ${scopes}`);
        
        if (!scopes.includes('repo')) {
            console.log('‚ö†Ô∏è Aviso: Token pode n√£o ter permiss√µes suficientes para push');
            console.log('   Certifique-se de que o scope "repo" est√° selecionado.');
        } else {
            console.log('‚úÖ Token tem permiss√µes adequadas para reposit√≥rios');
        }
        
        // Atualizar arquivo de tokens
        console.log('\nüíæ Atualizando configura√ß√£o...');
        const tokensPath = path.join(__dirname, 'data', 'auth', 'tokens.json');
        let tokens = {};
        
        if (fs.existsSync(tokensPath)) {
            tokens = JSON.parse(fs.readFileSync(tokensPath, 'utf8'));
        }
        
        const userId = 'd2929b81-cb3f-47a1-b47b-6b0311964361';
        
        if (!tokens[userId]) {
            tokens[userId] = {};
        }
        
        tokens[userId].github_token = token;
        tokens[userId].user_metadata = {
            github_username: user.login,
            avatar_url: user.avatar_url,
            name: user.name
        };
        tokens[userId].updated_at = new Date().toISOString();
        
        // Salvar tokens
        fs.writeFileSync(tokensPath, JSON.stringify(tokens, null, 2));
        console.log('‚úÖ Configura√ß√£o atualizada');
        
        // Testar push autom√°tico
        console.log('\nüß™ TESTANDO PUSH AUTOM√ÅTICO');
        console.log('============================================================');
        
        const username = user.login;
        const repoName = 'github-sync-test';
        
        // Configurar Git local
        console.log('üîß Configurando Git local...');
        
        try {
            execSync('git remote remove origin', { stdio: 'pipe' });
        } catch (e) {}
        
        execSync(`git config user.name "${user.name || user.login}"`, { stdio: 'inherit' });
        execSync(`git config user.email "${user.email || 'noreply@github.com'}"`, { stdio: 'inherit' });
        
        // Criar reposit√≥rio se n√£o existir
        console.log('üìÅ Verificando reposit√≥rio...');
        
        const createRepoOptions = {
            hostname: 'api.github.com',
            path: '/user/repos',
            method: 'POST',
            headers: {
                'Authorization': `token ${token}`,
                'User-Agent': 'GitHub-Sync-App',
                'Accept': 'application/vnd.github.v3+json',
                'Content-Type': 'application/json'
            }
        };
        
        const repoData = {
            name: repoName,
            description: 'Reposit√≥rio de teste para sincroniza√ß√£o autom√°tica',
            private: false,
            auto_init: true
        };
        
        try {
            const createResult = await makeGitHubRequest(createRepoOptions, repoData);
            if (createResult.statusCode === 201) {
                console.log('‚úÖ Reposit√≥rio criado com sucesso');
            } else if (createResult.statusCode === 422) {
                console.log('‚ÑπÔ∏è Reposit√≥rio j√° existe, continuando...');
            } else {
                console.log(`‚ö†Ô∏è Status do reposit√≥rio: ${createResult.statusCode}`);
            }
        } catch (repoError) {
            console.log('‚ö†Ô∏è Continuando com reposit√≥rio existente...');
        }
        
        // Adicionar remote com token
        const remoteUrl = `https://${username}:${token}@github.com/${username}/${repoName}.git`;
        execSync(`git remote add origin ${remoteUrl}`, { stdio: 'inherit' });
        
        // Criar arquivo de teste
        const testFile = 'github-sync-test.md';
        const testContent = `# GitHub Sync Test\n\nTeste de sincroniza√ß√£o autom√°tica realizado em: ${new Date().toISOString()}\n\n‚úÖ Push autom√°tico configurado com sucesso!\n\n## Detalhes da Configura√ß√£o\n\n- **Usu√°rio:** ${user.login}\n- **Token Scopes:** ${scopes}\n- **Reposit√≥rios:** ${user.public_repos}\n- **Configurado em:** ${new Date().toLocaleString()}\n`;
        
        fs.writeFileSync(testFile, testContent);
        console.log('üìù Arquivo de teste criado');
        
        // Fazer commit e push
        console.log('üìù Fazendo commit...');
        execSync('git add .', { stdio: 'inherit' });
        
        try {
            execSync(`git commit -m "Test: Configura√ß√£o autom√°tica de push - ${new Date().toISOString()}"`, { stdio: 'inherit' });
        } catch (e) {
            console.log('‚ÑπÔ∏è Nenhuma mudan√ßa para commitar');
        }
        
        console.log('üöÄ Fazendo push...');
        
        try {
            // Tentar pull primeiro
            try {
                execSync('git pull origin main --allow-unrelated-histories', { stdio: 'pipe' });
                console.log('üì• Pull realizado');
            } catch (e) {
                console.log('‚ÑπÔ∏è Pull n√£o necess√°rio ou falhou, continuando...');
                try {
                    execSync('git checkout -b main', { stdio: 'pipe' });
                } catch (e2) {}
            }
            
            // Fazer push
            execSync('git push -u origin main', { stdio: 'inherit' });
            console.log('üéâ PUSH REALIZADO COM SUCESSO!');
            
            // Verificar no GitHub
            const checkOptions = {
                hostname: 'api.github.com',
                path: `/repos/${username}/${repoName}`,
                method: 'GET',
                headers: {
                    'Authorization': `token ${token}`,
                    'User-Agent': 'GitHub-Sync-App'
                }
            };
            
            const checkResult = await makeGitHubRequest(checkOptions);
            if (checkResult.statusCode === 200) {
                console.log(`‚úÖ Reposit√≥rio confirmado: ${checkResult.data.html_url}`);
                console.log(`üìà √öltimo push: ${checkResult.data.pushed_at}`);
            }
            
        } catch (pushError) {
            console.log('‚ùå Erro no push:', pushError.message);
            
            // Tentar diagn√≥stico
            console.log('\nüîç DIAGN√ìSTICO DO ERRO:');
            if (pushError.message.includes('rejected')) {
                console.log('- O push foi rejeitado pelo GitHub');
                console.log('- Poss√≠vel causa: reposit√≥rio remoto tem mudan√ßas n√£o sincronizadas');
                console.log('- Solu√ß√£o: fazer pull antes do push');
            }
            if (pushError.message.includes('authentication')) {
                console.log('- Erro de autentica√ß√£o');
                console.log('- Poss√≠vel causa: token inv√°lido ou sem permiss√µes');
                console.log('- Solu√ß√£o: verificar token e scopes');
            }
            if (pushError.message.includes('repository not found')) {
                console.log('- Reposit√≥rio n√£o encontrado');
                console.log('- Poss√≠vel causa: reposit√≥rio n√£o foi criado');
                console.log('- Solu√ß√£o: criar reposit√≥rio manualmente');
            }
            
            throw pushError;
        }
        
        // Limpar configura√ß√£o sens√≠vel
        console.log('\nüßπ Limpando configura√ß√£o sens√≠vel...');
        execSync('git remote remove origin', { stdio: 'pipe' });
        execSync(`git remote add origin https://github.com/${username}/${repoName}.git`, { stdio: 'pipe' });
        
        console.log('\nüéâ CONFIGURA√á√ÉO CONCLU√çDA COM SUCESSO!');
        console.log('============================================================');
        console.log('‚úÖ Token do GitHub configurado e validado');
        console.log('‚úÖ Push autom√°tico testado e funcionando');
        console.log('‚úÖ Sistema pronto para sincroniza√ß√£o autom√°tica');
        console.log('\nüìã RESUMO DA CONFIGURA√á√ÉO:');
        console.log(`- üë§ Usu√°rio: ${user.login}`);
        console.log(`- üîê Scopes: ${scopes}`);
        console.log(`- üìÅ Reposit√≥rio de teste: ${username}/${repoName}`);
        console.log(`- üïí Configurado em: ${new Date().toLocaleString()}`);
        
        console.log('\nüöÄ PR√ìXIMOS PASSOS:');
        console.log('1. O sistema agora pode fazer push autom√°tico para o GitHub');
        console.log('2. As credenciais est√£o configuradas de forma segura');
        console.log('3. N√£o ser√° necess√°ria interven√ß√£o manual para push');
        console.log('4. Teste o sistema fazendo mudan√ßas e executando o sync');
        
        // Salvar relat√≥rio
        const report = {
            status: 'success',
            timestamp: new Date().toISOString(),
            token_source: tokenSource,
            user: {
                login: user.login,
                name: user.name,
                public_repos: user.public_repos
            },
            token_scopes: scopes,
            test_repository: `${username}/${repoName}`,
            actions_completed: [
                'Token encontrado e validado',
                'Credenciais salvas no sistema',
                'Reposit√≥rio de teste verificado/criado',
                'Git local configurado',
                'Push autom√°tico testado com sucesso',
                'Configura√ß√£o sens√≠vel limpa',
                'Sistema pronto para uso'
            ],
            next_steps: [
                'Sistema configurado para push autom√°tico',
                'Credenciais seguras em data/auth/tokens.json',
                'Teste o sync fazendo mudan√ßas no c√≥digo'
            ]
        };
        
        fs.writeFileSync('github-auto-setup-success.json', JSON.stringify(report, null, 2));
        console.log('\nüìÑ Relat√≥rio completo salvo em: github-auto-setup-success.json');
        
    } catch (error) {
        console.log('\n‚ùå ERRO NA CONFIGURA√á√ÉO:', error.message);
        console.log('============================================================');
        
        const errorReport = {
            status: 'error',
            timestamp: new Date().toISOString(),
            error: error.message,
            stack: error.stack,
            troubleshooting: {
                token_issues: [
                    'Verificar se o token √© v√°lido e come√ßa com "ghp_"',
                    'Confirmar que o token tem os scopes necess√°rios: repo, user',
                    'Verificar se o token n√£o expirou'
                ],
                network_issues: [
                    'Verificar conectividade com GitHub (api.github.com)',
                    'Verificar se n√£o h√° firewall bloqueando',
                    'Tentar novamente em alguns minutos'
                ],
                permission_issues: [
                    'Verificar se o usu√°rio tem permiss√£o no reposit√≥rio',
                    'Confirmar que o reposit√≥rio existe e √© acess√≠vel',
                    'Verificar se o token tem permiss√µes de push'
                ]
            },
            recommendations: [
                'Gerar um novo token se o atual estiver inv√°lido',
                'Verificar as configura√ß√µes de rede',
                'Consultar a documenta√ß√£o do GitHub para troubleshooting',
                'Tentar configura√ß√£o manual se o problema persistir'
            ]
        };
        
        fs.writeFileSync('github-auto-setup-error.json', JSON.stringify(errorReport, null, 2));
        console.log('üìÑ Relat√≥rio de erro detalhado salvo em: github-auto-setup-error.json');
        
        console.log('\nüîß SOLU√á√ïES R√ÅPIDAS:');
        console.log('1. Verificar se o token est√° correto');
        console.log('2. Confirmar conectividade com GitHub');
        console.log('3. Verificar permiss√µes do token');
        console.log('4. Tentar gerar um novo token');
        
        process.exit(1);
    }
}

// Executar se chamado diretamente
if (require.main === module) {
    setupGitHubAutomatically();
}

module.exports = { setupGitHubAutomatically };